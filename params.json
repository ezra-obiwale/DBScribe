{
  "name": "Dbscribe",
  "tagline": "PDO Abstraction Classes to manage Database operations including database, table, and column creation and auto-update, and CRUD functions from within PHP ",
  "body": "#PDO Abstraction\r\n***\r\n\r\nThis library can create your databases, tables and columns. It can further keep an eye on your models to see if any column needs to be updated. This constant monitoring is based on annotations.\r\n\r\n##General uses\r\n\r\nBelow is a table showing the general uses of each file:\r\n\r\nFile|Uses\r\n----|----\r\nAnnotation.php|Used to read annotations on models. Only used internally. Ignore.\r\nArrayCollection.php|An iteratable collection of models with additional methods for navigation.\r\nConnection.php|Extends PDO and accepts PDO options to create a connection to the database.\r\nMapper.php|Extends Row. Required class to be extended by models for auto-generation and monitoring\r\nRepository.php|Extends Table. Contains additional methods to for easier db access.\r\nRow.php|A typical object representing a row in the database.\r\nTable.php|Represents a table in the database and provides methods for operations.\r\nUtil.php|Contains utility methods used in operations and may be used by developers too if necessary.\r\n\r\n##Basic Usage\r\n\r\n###Connecting to a database\r\n\r\n````php\r\n    $connection = new Connection('mysql:host=localhost;dbname=test_db', 'db_user', 'db_user_password', array(\r\n        'tablePrefix' => 'ds_', // optional - Indicates the prefix to add to table names\r\n        'create' => true, // optional - Indicates whether to create the database if it doesn't exist,\r\n        'autoUpdate' => true, // optional - Indicates whether to auto update database tables from mapper class annotations\r\n    ));\r\n````\r\n\r\n###Connecting to a table\r\n\r\nExample database table columns\r\n\r\n_Table **ds\\_user**_\r\n\r\n  id  |  first\\_name  |  last\\_name  |  gender\r\n------|---------------|--------------|--------\r\n  1   |  Adam         |  Freeman     |  male\r\n  2   |  Eve          |  Gerald      |  female\r\n\r\n\r\n\r\n* **Method 1**\r\n````php\r\n    $tblUser = $connection->table('user'); // Note: Table name without prefix\r\n````\r\n\r\n* **Method 2**\r\n````php\r\n    $tblUser = new Table('user', $connection); // Note: Table name without prefix\r\n````\r\n\r\n###CRUD\r\n\r\n* **Creating entries**\r\n````php\r\n    // using array\r\n    $row1 = array('first_name' => 'Shade', 'last_name' => 'Adeyemi');\r\n\r\n    // using objects\r\n    $row2 = new Row();\r\n    $row2->firstName = 'Segun';\r\n    $row2->lastName = 'Ajayi';\r\n\r\n    $tblUser->insert(array($row1, $row2));\r\n````\r\n* **Reading entries**\r\n````php\r\n    $tblUser->select(); // Returns all rows\r\n\r\n    $criteria = array(\r\n        array('firstName' => 'Segun'),\r\n        array('firstName' => 'Shade'),\r\n    );\r\n    $rows = $tblUser->select($criteria); // Returns object ArrayCollection containing 2 Row objects\r\n    // $tblUser->select($criteria, Table::RETURN_DEFAULT) returns an array of row arrays\r\n    // $tblUser->select($criteria, Table::RETURN_JSON) returns (You got it right) JSON objects\r\n````\r\n* **Updating entries**\r\n````php\r\n    $row1 = array('first_name' => 'Segun', 'last_name' => 'Ayodeji');\r\n    $row2 = new Row();\r\n    $row2->firstName = 'Shade';\r\n    $row2->lastName = 'Asegun';\r\n\r\n    $tblUser->update(array($row1, $row2), 'firstName'); // updates the rows where the first_name is as given in the column to update by\r\n````\r\n* **Deleting entries**\r\n````php\r\n    $tblUser->delete(array($row1, $row2)); // deletes based on the columns provided in the rows\r\n````\r\n\r\n##Advanced Usage\r\n\r\n###Creating Models\r\n````php\r\n    class User extends DBScribe\\Mapper {\r\n        /** @DBS\\Int (primary=true,autoIncrement=true,size=2) **/\r\n        public $id;\r\n        /** @DBS\\String (size=20) **/\r\n        public $firstName;\r\n        /** @DBS\\String (size=20) **/\r\n        public $lastName;\r\n\r\n        public function preSave() {\r\n            // do something before saving to database\r\n        }\r\n\r\n        public function postFetch() {\r\n            // do something after retrieving from database\r\n        }\r\n    }\r\n\r\n    $user = new User();\r\n    $user->firstName = 'Emmanuella';\r\n    $user->lastName = 'Oyewumi';\r\n\r\n    $repoUser = new Repository($user, $connection);\r\n\r\n    $repoUser->insert(array($user));\r\n\r\n    $repoUser->fetchAll(); // same as select() without criteria\r\n    $repoUser->findOneBy('firstName', 'Emmanuella');\r\n    $repoUser->findWhere([$row1, $row2]);\r\n    $repoUser->findById(2);\r\n\r\n````",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}